scale_alpha_manual(values = c(1,0.5,0.5))
g1st_plot %>% ggplot(aes(x = x, y = mean, color = method)) +
geom_line(size=line_size, aes(linetype = method, alpha = method, order = order)) +
theme_classic(base_size = 15) + theme(legend.position="none") +
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
scale_color_manual(values = c("red", "blue", "black")) +
scale_alpha_manual(values = c(1,0.5,0.5)) +
xlim(c(0.1,10))
g1st_plot %>% ggplot(aes(x = x, y = mean, color = method)) +
geom_line(size=line_size, aes(linetype = method, alpha = method, order = order)) +
theme_classic(base_size = 15) + theme(legend.position="none") +
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
scale_color_manual(values = c("red", "blue", "black")) +
scale_alpha_manual(values = c(1,0.5,1)) +
xlim(c(0.1,10))
ggsave(paste0(figure_path,"single_g1st_compare.pdf"), device = "pdf", width = 5, height = 5)
### for g'':
g2nd_plot <- data.frame(mean = c(OS_g2nd_mean, RW_g2nd_mean, gx2nd),
method = rep(c("OS", "RW", "Truth"), each = length(x)),
x = rep(x, 3))
g2nd_plot$order <- c(rep(3, length(x)),rep(1, length(x)), rep(2, length(x)))
levels(as.factor(g2nd_plot$method))
g2nd_plot$method <- factor(g2nd_plot$method, levels = c("Truth","OS","RW"))
d2 <- g2nd_plot %>% ggplot(aes(x = x, y = mean, color = method)) +
geom_line(size=line_size, aes(linetype = method, alpha = method, order = order)) +
theme_classic(base_size = 15) +
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
scale_color_manual(values = c("red","blue", "black")) +
scale_alpha_manual(values = c(1,1,0.5,0.5)) +
xlim(c(0.2,10))
d2 <- lemon::reposition_legend(d2, "right bottom")
### for g'':
g2nd_plot <- data.frame(mean = c(OS_g2nd_mean, RW_g2nd_mean, gx2nd),
method = rep(c("OS", "RW", "Truth"), each = length(x)),
x = rep(x, 3))
g2nd_plot$order <- c(rep(3, length(x)),rep(1, length(x)), rep(2, length(x)))
levels(as.factor(g2nd_plot$method))
g2nd_plot$method <- factor(g2nd_plot$method, levels = c("Truth","OS","RW"))
d2 <- g2nd_plot %>% ggplot(aes(x = x, y = mean, color = method)) +
geom_line(size=line_size, aes(linetype = method, alpha = method, order = order)) +
theme_classic(base_size = 15) +
scale_linetype_manual(values=c("dotted", "solid", "dashed")) +
scale_color_manual(values = c("black","red", "blue")) +
scale_alpha_manual(values = c(1,1,0.5,0.5)) +
xlim(c(0.2,10))
d2 <- lemon::reposition_legend(d2, "right bottom")
### for g'':
g2nd_plot <- data.frame(mean = c(OS_g2nd_mean, RW_g2nd_mean, gx2nd),
method = rep(c("OS", "RW", "Truth"), each = length(x)),
x = rep(x, 3))
g2nd_plot$order <- c(rep(3, length(x)),rep(1, length(x)), rep(2, length(x)))
levels(as.factor(g2nd_plot$method))
g2nd_plot$method <- factor(g2nd_plot$method, levels = c("Truth","OS","RW"))
d2 <- g2nd_plot %>% ggplot(aes(x = x, y = mean, color = method)) +
geom_line(size=line_size, aes(linetype = method, alpha = method, order = order)) +
theme_classic(base_size = 15) +
scale_linetype_manual(values=c("dotted", "solid", "dashed")) +
scale_color_manual(values = c("black","red", "blue")) +
scale_alpha_manual(values = c(1,1,0.5)) +
xlim(c(0.2,10))
d2 <- lemon::reposition_legend(d2, "right bottom")
ggsave(paste0(figure_path,"single_g2nd_compare.pdf"), device = "pdf", width = 5, height = 5)
WORK_PATH <- getwd()
figure_path <- paste0(WORK_PATH, "/figure/")
result_path <- paste0(WORK_PATH, "/result/")
cpp_path <- paste0(WORK_PATH, "/cpp/")
source_path <- paste0(WORK_PATH, "/source/")
source(paste0(source_path,"00_load.R"))
source(paste0(source_path,"01_Ospline.R"))
source(paste0(source_path,"02_prior.R"))
dyn.load(dynlib(paste0(cpp_path,"00_Gaussian_Smoothing_PC")))
dyn.load(dynlib(paste0(cpp_path,"02_RW2Comparison")))
parallel::detectCores()
identify_arg_max
GMM_simulation_agg <- function(B = 300, SNR, x, k, parallel = T){
do_once <- function(seed, SNR, x, k){
set.seed(seed)
pvec <- c(0.6,0.3,0.1)
muvec <- rnorm(n = length(pvec), mean = 5, sd = 2)
SDvec <- rep(1, length(pvec))
gx <- dnormm(x = x, p = pvec, mu = muvec, sigma = SDvec)
gx <- gx/sd(gx)
gx1st <- diff(gx)/diff(x)
gx1st <- c(gx1st[1], gx1st)
gx2nd <- diff(gx1st)/diff(x)
gx2nd <- c(gx2nd[1], gx2nd)
y <- gx + rnorm(n = length(x), sd = sqrt(var(gx)/SNR))
predictive_prior <- list(u = 1, alpha = 0.5)
prior_set_1 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 3)
prior_set_2 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 2)
prior_set <- list(
u1 = prior_set_1$u,
alpha1 = prior_set_1$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
prior_set_2 <- list(
u1 = prior_set_2$u,
alpha1 = prior_set_2$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
if(is.null(k)){
k <- length(x)
OS3_fit <- Imple_BayesRegression(y = y, x = x, p = 3, prior.type = "PC", prior = prior_set)
RW2_fit <- Imple_RW2(y = y, x = x, prior = prior_set_2)
data <- data.frame(x = x, y = y)
OS_samps <- extract_samples_Ospline_refined(OS3_fit, x = x, refined_x = x, p = 3)
RW_samps <- extract_RW_samples(RW2_fit, x = x, refined_x = x)
OS_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = x, refined_x = x, degree = 1)
RW_deriv_samps <- RW_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x))
RW_deriv_samps <- rbind(RW_deriv_samps[1,],RW_deriv_samps)
RW_deriv_samps <- cbind(x,RW_deriv_samps)
OS_2nd_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = x, refined_x = x, degree = 2)
RW_2nd_deriv_samps <- RW_deriv_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x), degree = 1)
RW_2nd_deriv_samps <- rbind(RW_2nd_deriv_samps[1,],RW_2nd_deriv_samps)
RW_2nd_deriv_samps <- cbind(x,RW_2nd_deriv_samps)
}
else{
knots <- seq(from = 0, to = max(x), length.out = k)
OS3_fit <- Imple_BayesRegression(y = y, x = x, p = 3, prior.type = "PC", prior = prior_set, knots = knots)
RW2_fit <- Imple_RW2(y = y, x = x, prior = prior_set_2, knots = knots)
data <- data.frame(x = x, y = y)
OS_samps <- extract_samples_Ospline_refined(OS3_fit, x = knots, refined_x = x, p = 3)
RW_samps <- extract_RW_samples(RW2_fit, x = knots, refined_x = x)
OS_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = knots, refined_x = x, degree = 1)
RW_deriv_samps <- RW_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x))
RW_deriv_samps <- rbind(RW_deriv_samps[1,],RW_deriv_samps)
RW_deriv_samps <- cbind(x,RW_deriv_samps)
OS_2nd_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = knots, refined_x = x, degree = 2)
OS_2nd_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = x, refined_x = x, degree = 2)
RW_2nd_deriv_samps <- RW_deriv_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x), degree = 1)
RW_2nd_deriv_samps <- rbind(RW_2nd_deriv_samps[1,],RW_2nd_deriv_samps)
RW_2nd_deriv_samps <- cbind(x,RW_2nd_deriv_samps)
}
OS_g_mean <- OS_samps[,-1] %>% apply(MARGIN = 1, mean)
RW_g_mean <- RW_samps[,-1] %>% apply(MARGIN = 1, mean)
OS_g1st_mean <- OS_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
RW_g1st_mean <- RW_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
OS_g2nd_mean <- OS_2nd_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
RW_g2nd_mean <- RW_2nd_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
rMSE_g <- c(
sqrt(mean((OS_g_mean - gx)^2)),
sqrt(mean((BS_g_mean - gx)^2)),
sqrt(mean((RW_g_mean - gx)^2))
)
rMSE_g1st <- c(
sqrt(mean((OS_g1st_mean - gx1st)^2)),
sqrt(mean((BS_g1st_mean - gx1st)^2)),
sqrt(mean((RW_g1st_mean - gx1st)^2))
)
rMSE_g2nd <- c(
sqrt(mean((OS_g2nd_mean - gx2nd)^2)),
sqrt(mean((BS_g2nd_mean - gx2nd)^2)),
sqrt(mean((RW_g2nd_mean - gx2nd)^2))
)
result <- data.frame(method = c("OS", "RW"), k = k, seed = i, rMSE_g = rMSE_g,
rMSE_g1st = rMSE_g1st, rMSE_g2nd = rMSE_g2nd)
}
if(parallel == T){
result_all <- foreach(i = 1:B, .combine = "rbind", .packages = c("progress", "TMB", "aghq", "Matrix", "tidyverse", "GET", "tsDyn", "LaplacesDemon")) %dopar% {
do_once(seed = i, SNR = SNR, x = x, k = k)
}
result_all
}
else{
result_all <- data.frame()
for (i in 1:B) {
result_all <- rbind(result_all, do_once(seed = i, SNR = SNR, x = x, k = k))
}
result_all
}
}
### Parallel setup:
n.cores <- parallel::detectCores() - 2
my_cluster <- parallel::makeCluster(
n.cores,
type = "FORK" # on mac/linux, use FORK; on windows, use PSOCK
)
doParallel::registerDoParallel(cl = my_cluster)
WORK_PATH <- getwd()
figure_path <- paste0(WORK_PATH, "/figure/")
result_path <- paste0(WORK_PATH, "/result/")
cpp_path <- paste0(WORK_PATH, "/cpp/")
source_path <- paste0(WORK_PATH, "/source/")
source(paste0(source_path,"00_load.R"))
source(paste0(source_path,"01_Ospline.R"))
source(paste0(source_path,"02_prior.R"))
compile(paste0(cpp_path,"00_Gaussian_Smoothing_PC.cpp"))
compile(paste0(cpp_path,"02_RW2Comparison.cpp"))
dyn.load(dynlib(paste0(cpp_path,"00_Gaussian_Smoothing_PC")))
dyn.load(dynlib(paste0(cpp_path,"02_RW2Comparison")))
GMM_simulation_agg <- function(B = 300, SNR, x, k, parallel = T, SYSTEM = "MAC"){
do_once <- function(seed, SNR, x, k){
set.seed(seed)
pvec <- c(0.6,0.3,0.1)
muvec <- rnorm(n = length(pvec), mean = 5, sd = 2)
SDvec <- rep(1, length(pvec))
gx <- dnormm(x = x, p = pvec, mu = muvec, sigma = SDvec)
gx <- gx/sd(gx)
gx1st <- diff(gx)/diff(x)
gx1st <- c(gx1st[1], gx1st)
gx2nd <- diff(gx1st)/diff(x)
gx2nd <- c(gx2nd[1], gx2nd)
y <- gx + rnorm(n = length(x), sd = sqrt(var(gx)/SNR))
predictive_prior <- list(u = 1, alpha = 0.5)
prior_set_1 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 3)
prior_set_2 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 2)
prior_set <- list(
u1 = prior_set_1$u,
alpha1 = prior_set_1$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
prior_set_2 <- list(
u1 = prior_set_2$u,
alpha1 = prior_set_2$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
if(is.null(k)){
k <- length(x)
OS3_fit <- Imple_BayesRegression(y = y, x = x, p = 3, prior.type = "PC", prior = prior_set)
RW2_fit <- Imple_RW2(y = y, x = x, prior = prior_set_2)
data <- data.frame(x = x, y = y)
OS_samps <- extract_samples_Ospline_refined(OS3_fit, x = x, refined_x = x, p = 3)
RW_samps <- extract_RW_samples(RW2_fit, x = x, refined_x = x)
OS_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = x, refined_x = x, degree = 1)
RW_deriv_samps <- RW_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x))
RW_deriv_samps <- rbind(RW_deriv_samps[1,],RW_deriv_samps)
RW_deriv_samps <- cbind(x,RW_deriv_samps)
OS_2nd_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = x, refined_x = x, degree = 2)
RW_2nd_deriv_samps <- RW_deriv_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x), degree = 1)
RW_2nd_deriv_samps <- rbind(RW_2nd_deriv_samps[1,],RW_2nd_deriv_samps)
RW_2nd_deriv_samps <- cbind(x,RW_2nd_deriv_samps)
}
else{
knots <- seq(from = 0, to = max(x), length.out = k)
OS3_fit <- Imple_BayesRegression(y = y, x = x, p = 3, prior.type = "PC", prior = prior_set, knots = knots)
RW2_fit <- Imple_RW2(y = y, x = x, prior = prior_set_2, knots = knots)
data <- data.frame(x = x, y = y)
OS_samps <- extract_samples_Ospline_refined(OS3_fit, x = knots, refined_x = x, p = 3)
RW_samps <- extract_RW_samples(RW2_fit, x = knots, refined_x = x)
OS_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = knots, refined_x = x, degree = 1)
RW_deriv_samps <- RW_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x))
RW_deriv_samps <- rbind(RW_deriv_samps[1,],RW_deriv_samps)
RW_deriv_samps <- cbind(x,RW_deriv_samps)
OS_2nd_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = knots, refined_x = x, degree = 2)
OS_2nd_deriv_samps <- extract_deriv_samples_OSpline(OS3_fit, p = 3, x = x, refined_x = x, degree = 2)
RW_2nd_deriv_samps <- RW_deriv_samps[,-1] %>% apply(MARGIN = 2, FUN = compute_numeric_deriv, h = diff(x), degree = 1)
RW_2nd_deriv_samps <- rbind(RW_2nd_deriv_samps[1,],RW_2nd_deriv_samps)
RW_2nd_deriv_samps <- cbind(x,RW_2nd_deriv_samps)
}
OS_g_mean <- OS_samps[,-1] %>% apply(MARGIN = 1, mean)
RW_g_mean <- RW_samps[,-1] %>% apply(MARGIN = 1, mean)
OS_g1st_mean <- OS_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
RW_g1st_mean <- RW_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
OS_g2nd_mean <- OS_2nd_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
RW_g2nd_mean <- RW_2nd_deriv_samps[,-1] %>% apply(MARGIN = 1, mean)
rMSE_g <- c(
sqrt(mean((OS_g_mean - gx)^2)),
sqrt(mean((BS_g_mean - gx)^2)),
sqrt(mean((RW_g_mean - gx)^2))
)
rMSE_g1st <- c(
sqrt(mean((OS_g1st_mean - gx1st)^2)),
sqrt(mean((BS_g1st_mean - gx1st)^2)),
sqrt(mean((RW_g1st_mean - gx1st)^2))
)
rMSE_g2nd <- c(
sqrt(mean((OS_g2nd_mean - gx2nd)^2)),
sqrt(mean((BS_g2nd_mean - gx2nd)^2)),
sqrt(mean((RW_g2nd_mean - gx2nd)^2))
)
result <- data.frame(method = c("OS", "RW"), k = k, seed = i, rMSE_g = rMSE_g,
rMSE_g1st = rMSE_g1st, rMSE_g2nd = rMSE_g2nd)
}
if(parallel == T){
if(SYSTEM == "MAC"){
result_all <- foreach(i = 1:B, .combine = "rbind", .packages = c("progress", "TMB", "aghq", "Matrix", "tidyverse", "GET", "tsDyn", "LaplacesDemon")) %dopar% {
do_once(seed = i, SNR = SNR, x = x, k = k)
}
}
else{
result_all <- foreach(i = 1:B, .combine = "rbind", .packages = c("progress", "TMB", "aghq", "Matrix", "tidyverse", "GET", "tsDyn", "LaplacesDemon")) %dopar% {
WORK_PATH <- getwd()
figure_path <- paste0(WORK_PATH, "/figure/")
result_path <- paste0(WORK_PATH, "/result/")
cpp_path <- paste0(WORK_PATH, "/cpp/")
source_path <- paste0(WORK_PATH, "/source/")
source(paste0(source_path,"00_load.R"))
source(paste0(source_path,"01_Ospline.R"))
source(paste0(source_path,"02_prior.R"))
dyn.load(dynlib(paste0(cpp_path,"00_Gaussian_Smoothing_PC")))
dyn.load(dynlib(paste0(cpp_path,"02_RW2Comparison")))
do_once(seed = i, SNR = SNR, x = x, k = k)
}
}
result_all
}
else{
result_all <- data.frame()
for (i in 1:B) {
result_all <- rbind(result_all, do_once(seed = i, SNR = SNR, x = x, k = k))
}
result_all
}
}
### Parallel setup:
n.cores <- parallel::detectCores() - 2
my_cluster <- parallel::makeCluster(
n.cores,
type = "FORK" # on mac/linux, use FORK; on windows, use PSOCK
)
doParallel::registerDoParallel(cl = my_cluster)
#########################################
#########################################
#########################################
## High SNR case: SNR = 100
x <- seq(from = 0, to = 10, length.out = 100)
start_time <- Sys.time()
result_high <- GMM_simulation_agg(B = 300, SNR = 100, x = x, k = 100, parallel = T)
source(paste0(source_path,"01_Ospline.R"))
WORK_PATH <- getwd()
figure_path <- paste0(WORK_PATH, "/figure/")
result_path <- paste0(WORK_PATH, "/result/")
cpp_path <- paste0(WORK_PATH, "/cpp/")
source_path <- paste0(WORK_PATH, "/source/")
source(paste0(source_path,"00_load.R"))
source(paste0(source_path,"01_Ospline.R"))
source(paste0(source_path,"02_prior.R"))
### Plotting the result in the paper:
load(paste0(result_path, "GMM_result_high.rda"))
c <- median(result_high$rMSE_g[result_high$method == "OS"])
result_high$rMSE_g_rt <- (result_high$rMSE_g)/c
result_high %>% ggplot(aes(x = method, color = method, y = rMSE_g_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "high_agg_g_rt.pdf"), width = 5, height = 5, device = "pdf")
c <- median(result_high$rMSE_g1st[result_high$method == "OS"])
result_high$rMSE_g1st_rt <- (result_high$rMSE_g1st)/c
result_high %>% ggplot(aes(x = method, color = method, y = rMSE_g1st_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "high_agg_g1st_rt.pdf"), width = 5, height = 5, device = "pdf")
c <- median(result_high$rMSE_g2nd[result_high$method == "OS"])
result_high$rMSE_g2nd_rt <- (result_high$rMSE_g2nd)/c
result_high %>% ggplot(aes(x = method, color = method, y = rMSE_g2nd_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "high_agg_g2nd_rt.pdf"), width = 5, height = 5, device = "pdf")
#### Appendix for other choices of SNR:
load(paste0(result_path, "GMM_result_med.rda"))
c <- median(result_med$rMSE_g[result_med$method == "OS"])
result_med$rMSE_g_rt <- (result_med$rMSE_g)/c
result_med %>% ggplot(aes(x = method, color = method, y = rMSE_g_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "med_agg_g_rt.pdf"), width = 5, height = 5, device = "pdf")
c <- median(result_med$rMSE_g1st[result_med$method == "OS"])
result_med$rMSE_g1st_rt <- (result_med$rMSE_g1st)/c
result_med %>% ggplot(aes(x = method, color = method, y = rMSE_g1st_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "med_agg_g1st_rt.pdf"), width = 5, height = 5, device = "pdf")
c <- median(result_med$rMSE_g2nd[result_med$method == "OS"])
result_med$rMSE_g2nd_rt <- (result_med$rMSE_g2nd)/c
result_med %>% ggplot(aes(x = method, color = method, y = rMSE_g2nd_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "med_agg_g2nd_rt.pdf"), width = 5, height = 5, device = "pdf")
load(paste0(result_path, "GMM_result_low.rda"))
c <- median(result_low$rMSE_g[result_med$method == "OS"])
result_low$rMSE_g_rt <- (result_low$rMSE_g)/c
result_low %>% ggplot(aes(x = method, color = method, y = rMSE_g_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "low_agg_g_rt.pdf"), width = 5, height = 5, device = "pdf")
c <- median(result_low$rMSE_g1st[result_med$method == "OS"])
result_low$rMSE_g1st_rt <- (result_low$rMSE_g1st)/c
result_low %>% ggplot(aes(x = method, color = method, y = rMSE_g1st_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "low_agg_g1st_rt.pdf"), width = 5, height = 5, device = "pdf")
c <- median(result_low$rMSE_g2nd[result_med$method == "OS"])
result_low$rMSE_g2nd_rt <- (result_low$rMSE_g2nd)/c
result_low %>% ggplot(aes(x = method, color = method, y = rMSE_g2nd_rt)) + geom_boxplot() +
theme_classic(base_size = 15) + theme(legend.position="none") + ylab("scaled-rMSE") + ylim(0.5,4)
ggsave(paste0(figure_path, "low_agg_g2nd_rt.pdf"), width = 5, height = 5, device = "pdf")
WORK_PATH <- getwd()
figure_path <- paste0(WORK_PATH, "/figure/")
result_path <- paste0(WORK_PATH, "/result/")
cpp_path <- paste0(WORK_PATH, "/cpp/")
source_path <- paste0(WORK_PATH, "/source/")
source(paste0(source_path,"00_load.R"))
source(paste0(source_path,"01_Ospline.R"))
source(paste0(source_path,"02_prior.R"))
compile(paste0(cpp_path,"00_Gaussian_Smoothing_PC.cpp"))
compile(paste0(cpp_path,"02_RW2Comparison.cpp"))
dyn.load(dynlib(paste0(cpp_path,"00_Gaussian_Smoothing_PC")))
dyn.load(dynlib(paste0(cpp_path,"02_RW2Comparison")))
### Try to simulate mixture normal density:
set.seed(1234) # set.seed(10)
pvec <- c(0.6,0.3,0.1)
muvec <- rnorm(n = length(pvec), mean = 5, sd = 2)
# SDvec <- abs(rnorm(n = length(pvec), mean = 1, sd = 1))
SDvec <- rep(1, length(pvec))
x <- seq(from = 0, to = 10, by = 0.1)
gx <- dnormm(x = x, p = pvec, mu = muvec, sigma = SDvec)
gx <- gx/sd(gx)
plot(gx ~ x, type = 'l')
gx1st <- diff(gx)/diff(x)
gx1st <- c(gx1st[1], gx1st)
gx2nd <- diff(gx1st)/diff(x)
gx2nd <- c(gx2nd[1], gx2nd)
plot(gx1st ~ x, type = 'l')
SNR <- 100
y <- gx + rnorm(n = length(x), sd = sqrt(var(gx)/SNR))
plot(y ~ x)
lines(gx ~ x, lty = 'dashed')
SNR
var(gx)
compile(paste0(cpp_path,"00_Gaussian_Smoothing_PC.cpp"))
compile(paste0(cpp_path,"02_RW2Comparison.cpp"))
dyn.load(dynlib(paste0(cpp_path,"00_Gaussian_Smoothing_PC")))
dyn.load(dynlib(paste0(cpp_path,"02_RW2Comparison")))
### Try to simulate mixture normal density:
set.seed(1234) # set.seed(10)
pvec <- c(0.6,0.3,0.1)
muvec <- rnorm(n = length(pvec), mean = 5, sd = 2)
# SDvec <- abs(rnorm(n = length(pvec), mean = 1, sd = 1))
SDvec <- rep(1, length(pvec))
x <- seq(from = 0, to = 10, by = 0.1)
gx <- dnormm(x = x, p = pvec, mu = muvec, sigma = SDvec)
gx <- gx/sd(gx)
plot(gx ~ x, type = 'l')
gx1st <- diff(gx)/diff(x)
gx1st <- c(gx1st[1], gx1st)
gx2nd <- diff(gx1st)/diff(x)
gx2nd <- c(gx2nd[1], gx2nd)
plot(gx1st ~ x, type = 'l')
SNR <- 1
y <- gx + rnorm(n = length(x), sd = sqrt(var(gx)/SNR))
plot(y ~ x)
lines(gx ~ x, lty = 'dashed')
### Fit OS3, RW2::
predictive_prior <- list(u = 1, alpha = 0.5)
prior_set_1 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 3)
prior_set_2 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 2)
prior_set <- list(
u1 = prior_set_1$u,
alpha1 = prior_set_1$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
prior_set_2 <- list(
u1 = prior_set_2$u,
alpha1 = prior_set_2$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
knots <- seq(from = 0, to = 10, length.out = 100)
OS3_fit <- Imple_BayesRegression(y = y, x = x, knots = knots, p = 3, prior.type = "PC", prior = prior_set)
WORK_PATH <- getwd()
figure_path <- paste0(WORK_PATH, "/figure/")
result_path <- paste0(WORK_PATH, "/result/")
cpp_path <- paste0(WORK_PATH, "/cpp/")
source_path <- paste0(WORK_PATH, "/source/")
source(paste0(source_path,"00_load.R"))
source(paste0(source_path,"01_Ospline.R"))
source(paste0(source_path,"02_prior.R"))
compile(paste0(cpp_path,"00_Gaussian_Smoothing_PC.cpp"))
compile(paste0(cpp_path,"02_RW2Comparison.cpp"))
dyn.load(dynlib(paste0(cpp_path,"00_Gaussian_Smoothing_PC")))
dyn.load(dynlib(paste0(cpp_path,"02_RW2Comparison")))
### Try to simulate mixture normal density:
set.seed(1234) # set.seed(10)
pvec <- c(0.6,0.3,0.1)
muvec <- rnorm(n = length(pvec), mean = 5, sd = 2)
# SDvec <- abs(rnorm(n = length(pvec), mean = 1, sd = 1))
SDvec <- rep(1, length(pvec))
x <- seq(from = 0, to = 10, by = 0.1)
gx <- dnormm(x = x, p = pvec, mu = muvec, sigma = SDvec)
gx <- gx/sd(gx)
plot(gx ~ x, type = 'l')
gx1st <- diff(gx)/diff(x)
gx1st <- c(gx1st[1], gx1st)
gx2nd <- diff(gx1st)/diff(x)
gx2nd <- c(gx2nd[1], gx2nd)
plot(gx1st ~ x, type = 'l')
SNR <- 10
y <- gx + rnorm(n = length(x), sd = sqrt(var(gx)/SNR))
plot(y ~ x)
lines(gx ~ x, lty = 'dashed')
### Fit OS3, RW2::
predictive_prior <- list(u = 1, alpha = 0.5)
prior_set_1 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 3)
prior_set_2 <- prior_order_conversion_predictive(d = 1, predictive_prior, p = 2)
prior_set <- list(
u1 = prior_set_1$u,
alpha1 = prior_set_1$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
prior_set_2 <- list(
u1 = prior_set_2$u,
alpha1 = prior_set_2$alpha,
u2 = sqrt(var(gx)/SNR),
alpha2 = 0.5,
betaprec = 10^(-6)
)
knots <- seq(from = 0, to = 10, length.out = 100)
OS3_fit <- Imple_BayesRegression(y = y, x = x, knots = knots, p = 3, prior.type = "PC", prior = prior_set)
